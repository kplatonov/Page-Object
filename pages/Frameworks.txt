Splinter (https://splinter.readthedocs.io/en/latest/index.html) - довольно мощная надстройка над Selenium WebDriver, имеет множество дополнительных методов. Для работы совместно с PyTest существует специальный плагин pytest-splinter (https://github.com/pytest-dev/pytest-splinter), включающий собственные фикстуры.
PyPOM (https://pypom.readthedocs.io/en/latest/) - библиотека для реализации Page Object Model от разработчиков из проекта Mozilla. Поддерживает работу со Splinter https://github.com/mozilla/PyPOM
Webium (https://github.com/wgnet/webium) - легковесная реализация Page Object Model от разработчиков и тестировщиков Wargaming.net

Стоит обратить внимание на SeleniumBase (https://github.com/seleniumbase/SeleniumBase) и Golem (https://github.com/golemhq/golem), ну и конечно же на Robot Framework (https://robotframework.org/) + Selenium Library (https://github.com/robotframework/SeleniumLibrary/)


Splinter
Документация: https://splinter.readthedocs.io/en/latest/index.html

Код: https://github.com/cobrateam/splinter

Код и документация pytest-splinter: https://github.com/pytest-dev/pytest-splinter

Преимущества:

Популярный проект: 143 звезды на GitHub.

Достаточно актуальный проект, issues на GitHub оперативно закрываются.

Есть возможность поиска элемента с заданным текстом.

Есть методы работы, эмулирующие работу мышки, например, right_click, double_click и даже drag_and_drop.

Простые проверки на видимость элемента, а также на наличие классов.

Встроенные проверки на наличие текста и наличие элементов, которые удобно использовать в assert.

Недостатки:

Из популярных браузеров поддерживаются только Chrome и Firefox.

Примеры кода обновляются редко, некоторые примеры не работают и их приходится дорабатывать, чтобы запустить.

Splinter довольно серьезная надстройка над Selenium WebDriver, что потенциально может приводить к проблемам совместимости и необходимости ожидать поддержки изменений, внедряемых в Selenium.

Библиотеку для Page Object нужно устанавливать отдельно.

Если вы установите pytest-splinter, то получите возможность использовать дополнительные фикстуры:

Использование двух сессий браузера в тесте одновременно, например, для настройки окружения через админскую часть сайта.

Возможность задавать паузу после каждой команды WebDriver для дебага или презентации работы тестов.

Задание директории по умолчанию для скачивания файлов, что является проблемой в обычном Selenium, который не умеет работать с нативным диалогом сохранения файлов в ОС.

Возможность автоматического создания скриншотов в случае падения тестов.

Вывод:

Возможно, самая актуальная и мощная библиотека для Selenium и Python на данный момент.



PyPOM
Библиотека для реализации паттерна Page Object.

Документация: https://pypom.readthedocs.io/en/latest/

Код: https://github.com/mozilla/PyPOM

Преимущества:

Популярный проект: 85 звезд на GitHub.

Активный проект с регулярными коммитами. Разрабатывается под крылом известной компании -- есть надежда на долгосрочную поддержку библиотеки.

Поддерживает рассмотренный выше фреймворк Splinter, но может использоваться и независимо от него.

Позволяет задавать для страницы url по умолчанию, а также передавать параметры ссылки при инициализации страницы.

Возможность задавать произвольное условие окончательной загрузки страницы.

Хранение локаторов в виде атрибутов. Ленивая инициализация элементов.

Возможность описать и переиспользовать часть интерфейса пользователя, которая применяется на нескольких страница, например, футер.

Недостатки:

Нет возможности легко проверять в assert наличие элементов, если не установлен Splinter

Итог:

Можно использовать, если нет времени писать свою реализацию Page Object.


Webium
Еще одна библиотека для реализации паттерна Page Object.

Документация: http://wgnet.github.io/webium/

Код: https://github.com/wgnet/webium

Презентация: https://www.youtube.com/watch?v=XrL1BLgkKyA

Преимущества:

Популярный проект: 129 звезд на GitHub.

Минимум синтаксических отличий от Selenium WebDriver - можно легко внедрить и заменить на другую библиотеку в случае необходимости.

Позволяет задавать для страницы url по умолчанию, а также передавать параметры ссылки при инициализации страницы.

Хранение локаторов в виде атрибутов. Ленивая инициализация элементов.

Возможность описать и переиспользовать часть интерфейса пользователя, которая применяется на нескольких страница, например, футер.

Есть метод is_element_present, позволяющий проверять наличие элемента без выбрасывания исключения NoSuchElementException. Возвращает True или False.

Недостатки:

В репозитории проекта давно нет активности.

Итого:

Код проекта можно использовать в качестве примера для написания собственного Page Object фреймворка из-за его простоты. Саму библиотеку лучше не использовать в собственном проекте, так как репозиторий Webium выглядит заброшенным.

